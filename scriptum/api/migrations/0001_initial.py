# Generated by Django 5.2.4 on 2025-08-05 11:43

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('slug', models.SlugField(unique=True)),
                ('release_date', models.DateField(auto_now_add=True)),
                ('description', models.TextField()),
                ('public_type', models.CharField(choices=[('jeunesse', 'Jeunesse'), ('young_adult', 'Young Adult'), ('adulte', 'Adulte')], max_length=20)),
                ('image', models.ImageField(upload_to='book_images/')),
                ('state', models.CharField(default='En cours', max_length=20)),
                ('is_saga', models.BooleanField(default=False)),
                ('tome_name', models.CharField(blank=True, max_length=30, null=True)),
                ('tome_number', models.IntegerField(blank=True, null=True)),
                ('rating', models.FloatField(default=0.0)),
            ],
            options={
                'ordering': ['release_date', '-rating', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pseudo', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('author_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('birth_date', models.DateField()),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('content', models.TextField()),
                ('type', models.CharField(choices=[('prologue', 'Prologue'), ('chapitre', 'Chapitre'), ('epilogue', 'Epilogue')], max_length=10)),
                ('chapter_number', models.IntegerField(blank=True, null=True)),
                ('slug', models.SlugField()),
                ('sort_order', models.IntegerField(default=1, editable=False)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='api.book')),
            ],
            options={
                'ordering': ['sort_order', 'chapter_number'],
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField()),
                ('surname', models.CharField(blank=True, max_length=50, null=True)),
                ('role', models.CharField(choices=[('protagoniste', 'Protagoniste'), ('antagoniste', 'Antagoniste'), ('allié', 'Allié'), ('adversaire', 'Adversaire'), ('neutre', 'Neutre')], max_length=20)),
                ('image', models.ImageField(upload_to='character_images/')),
                ('age', models.IntegerField()),
                ('sexe', models.CharField(choices=[('masculin', 'Masculin'), ('féminin', 'Féminin'), ('autre', 'Autre')], max_length=10)),
                ('height', models.CharField(max_length=10)),
                ('background', models.TextField(max_length=1000)),
                ('species', models.CharField(default='Humain', max_length=30)),
                ('is_there_race', models.BooleanField(default=False)),
                ('race', models.CharField(blank=True, max_length=30, null=True)),
                ('character_trait', models.JSONField(blank=True, null=True)),
                ('day_birth', models.IntegerField(blank=True, null=True)),
                ('month_birth', models.IntegerField(blank=True, null=True)),
                ('hometown', models.CharField(blank=True, max_length=30, null=True)),
                ('language', models.CharField(blank=True, max_length=30, null=True)),
                ('study', models.JSONField(blank=True, null=True)),
                ('job', models.JSONField(blank=True, null=True)),
                ('relation', models.CharField(blank=True, choices=[('célibataire', 'Célibataire'), ('en couple', 'En couple'), ('fiancé.e', 'Fiancé.e'), ('marié.e', 'Marié.e'), ('divorcé.e', 'Divorcé.e'), ('veuf.ve', 'Veuf.ve')], max_length=20, null=True)),
                ('family', models.JSONField(blank=True, null=True)),
                ('addiction', models.JSONField(blank=True, null=True)),
                ('religion', models.CharField(blank=True, max_length=30, null=True)),
                ('fear', models.CharField(blank=True, max_length=30, null=True)),
                ('talent', models.CharField(blank=True, max_length=30, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characters', to='api.book')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Creature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('image', models.ImageField(upload_to='creature_images/')),
                ('content', models.TextField(max_length=1000)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creatures', to='api.book')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='genres',
            field=models.ManyToManyField(related_name='books', to='api.genre'),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('image', models.ImageField(upload_to='place_images/')),
                ('content', models.TextField(max_length=1000)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='places', to='api.book')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='themes',
            field=models.ManyToManyField(related_name='books', to='api.theme'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True)),
                ('publication_date', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.user')),
            ],
            options={
                'ordering': ['publication_date'],
            },
        ),
        migrations.CreateModel(
            name='FollowedAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='api.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_authors', to='api.user')),
            ],
            options={
                'ordering': ['author__author_name'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='api.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='api.user')),
            ],
            options={
                'ordering': ['book__title'],
            },
        ),
        migrations.CreateModel(
            name='ChapterComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication_date', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(max_length=500)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.chapter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.user')),
            ],
            options={
                'ordering': ['publication_date'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='api.user'),
        ),
        migrations.AddConstraint(
            model_name='chapter',
            constraint=models.UniqueConstraint(fields=('book', 'slug'), name='unique_chapter_per_book_slug'),
        ),
        migrations.AddConstraint(
            model_name='character',
            constraint=models.UniqueConstraint(fields=('book', 'name'), name='unique_character_name_per_book'),
        ),
        migrations.AddConstraint(
            model_name='creature',
            constraint=models.UniqueConstraint(fields=('book', 'name'), name='unique_creature_name_per_book'),
        ),
        migrations.AddConstraint(
            model_name='place',
            constraint=models.UniqueConstraint(fields=('book', 'name'), name='unique_place_name_per_book'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('book', 'user'), name='unique_review_per_user_per_book'),
        ),
        migrations.AddConstraint(
            model_name='chaptercomment',
            constraint=models.UniqueConstraint(fields=('chapter', 'user'), name='unique_comment_per_user_per_chapter'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.UniqueConstraint(fields=('slug',), name='unique_slug_book'),
        ),
    ]
